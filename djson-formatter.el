
(defun djson-format-break-before ()
  "Formata sinal com quebra de linha atras"
  (let ((mark-break (string-to-char "\n")))
    (insert-char mark-break)
    (forward-char)
    1)
  )

(defun djson-format-break-after (ini)
  "Formata sinal com quebra de linha a frente ate INI"
  (let ((diff-count 0)
	(mark-blank (string-to-char " "))
	(mark-break (string-to-char "\n")))
    (while (and (eq (char-before) mark-blank) (> (point) ini))
      (backward-delete-char 1)
      (setq diff-count (- diff-count 1)))
    (forward-char)
    (insert-char mark-break)
    (backward-char)
    (+ diff-count 1))
  )

(defun djson-format-blank-after (ini fim)
  "Formata sinal com um espaco em branco a frente entre INI e FIM"
  (let ((diff-count 0)
	(mark-blank (string-to-char " ")))
    (while (and (eq (char-before) mark-blank) (> (point) ini))
      (backward-char)
      (backward-delete-char 1)
      (setq diff-count (- diff-count 1)))
    (forward-char)
    (while (and (eq (char-after) mark-blank) (< (point) fim))
      (forward-char))
    (while (and (eq (char-before) mark-blank) (> (point) ini))
      (backward-char)
      (backward-delete-char 1)
      (setq diff-count (- diff-count 1)))
    (insert-char mark-blank)
    (backward-char)
    (+ diff-count 1))
  )

(defun djson-format (ini fim)
  "Formata Json entre INI e FIM"
  (interactive "*r")
  (let ((ignora)
	(pre-brln (list (string-to-char ",") (string-to-char "{") (string-to-char "[")))
	(pos-brln (list (string-to-char "]") (string-to-char "}")))
	(mark-colon (string-to-char ":"))
	(mark-quote (string-to-char "\""))
	(ini (copy-marker (min ini fim)))
	(fim (copy-marker (max ini fim))))
    (save-excursion
      (goto-char ini)
      (while (and (char-after) (< (point) fim))
	(progn
	  (message ">> %s %s" (char-to-string (char-after)) ignora)
	  (if (eq (char-after) mark-quote)
	      (setq ignora (not ignora))
	    (if (not ignora)
		(if (eq (char-after) mark-colon)
		    (setq fim (+ fim (djson-format-blank-after ini fim)))
		  (if (member (char-after) pre-brln)
		      (setq fim (+ fim (djson-format-break-after ini)))
		    (if (member (char-after) pos-brln)
			(setq fim (+ fim (djson-format-break-before)))
		      )
		    )
		  )
	      ))
	  (forward-char)
	  ))
      ))
  )
